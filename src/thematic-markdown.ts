import upath from 'upath'
import fs from 'fs'

/** Config filename of Vivliostyle. */
const CONFIG_FILE_NAME = 'vivliostyle.config.js'

/** Default markdown filename of Create Book. */
const DEFAULT_MARKDOWN_FILE_NAME = 'manuscript.md'

/** Name to rename the default file when copying Markdown files. */
const ESCAPED_MARKDOWN_FILE_NAME = '_manuscript.md'

/** Separator of `entry` element in` vivliostyle.config.js`. */
const ENTRIES_SEPARATOR = ',\n    '

/**
 * Get the path to the directory of the theme installed in the project generated by Create Book.
 * @param projectDir The path to the project directory generated by Create Book.
 * @returns A path string on success, an empty string on failure.
 * @throws Failed to load `vivliostyle.config.js`.
 */
const getThemeDir = (projectDir: string): string => {
  const config = require(upath.join(projectDir, CONFIG_FILE_NAME))
  if (!(config && typeof config.theme === 'string')) {
    return ''
  }

  return upath.normalize(upath.join(projectDir, 'node_modules', config.theme))
}

/**
 * Rename the default Markdown so it doesn't conflict with the theme's.
 * @param projectDir The path to the project directory generated by Create Book.
 */
const escapeDefaultMarkdownFile = (projectDir: string) => {
  const src = upath.join(projectDir, DEFAULT_MARKDOWN_FILE_NAME)
  const dest = upath.join(projectDir, ESCAPED_MARKDOWN_FILE_NAME)
  fs.renameSync(src, dest)
}

/**
 * Restore the Markdown file in your project's directory to its original state.
 * @param projectDir The path to the project directory generated by Create Book.
 * @param copiedFileNames Markdown file name list copied from theme to project directory.
 */
const restoreDefaultMarkdownFile = (
  projectDir: string,
  copiedFileNames: string[]
) => {
  copiedFileNames.forEach((fileName) => {
    const filePath = upath.join(projectDir, fileName)
    fs.unlinkSync(filePath)
  })

  const src = upath.join(projectDir, ESCAPED_MARKDOWN_FILE_NAME)
  const dest = upath.join(projectDir, DEFAULT_MARKDOWN_FILE_NAME)
  fs.renameSync(src, dest)
}

/**
 * Copy the Markdown files.
 * @param projectDir The path to the project directory generated by Create Book.
 * @param entries Relative path of the Markdown files on theme directory, e.g. '["example/foo.md", "bar.md"]'
 * @returns Name of the copied files.
 */
const copyMarkdownFiles = (
  themeDir: string,
  entries: string[],
  projectDir: string
): string[] => {
  const results: string[] = []
  if (entries.length === 0) {
    return results
  }

  escapeDefaultMarkdownFile(projectDir)

  for (const entry of entries) {
    const src = upath.normalize(upath.join(themeDir, entry))
    const newEntry = upath.basename(src)
    const dest = upath.normalize(upath.join(projectDir, newEntry))
    try {
      fs.copyFileSync(src, dest)
      results.push(newEntry)
    } catch (err) {
      // If even one fails, restore it to the default state so as not to make it incomplete.
      restoreDefaultMarkdownFile(projectDir, results)
      return []
    }
  }

  fs.unlinkSync(upath.join(projectDir, ESCAPED_MARKDOWN_FILE_NAME))

  return results
}

/**
 * Replace `entry` in your project's config file with a copied Markdown file.
 * @param projectDir The path to the project directory generated by Create Book.
 * @param entries Name of the Markdown files. e.g. '["foo.md", "bar.md"]'
 */
const replaceConfigEntries = (projectDir: string, entries: string[]) => {
  const filePath = upath.join(projectDir, CONFIG_FILE_NAME)
  const text = fs.readFileSync(filePath, 'utf-8')
  const entriesText =
    entries.map((entry) => `'${entry}'`).join(ENTRIES_SEPARATOR) + ','
  const newText = text.replace(`'manuscript.md',`, entriesText)
  fs.writeFileSync(filePath, newText)
}

/**
 * Apply thematic Markdown.
 * The markdown file is based on the `vivliostyle.config.js` definition of the installed theme.
 * @param projectDir The path to the project directory generated by Create Book.
 * @returns `true` on success, `false` on failure.
 * @throws Failed to load `vivliostyle.config.js`.
 */
export const thematicMarkdown = (projectDir: string): boolean => {
  const themeDir = getThemeDir(projectDir)
  if (themeDir === '') {
    return false
  }

  const config = require(upath.join(themeDir, CONFIG_FILE_NAME))
  if (!(config && Array.isArray(config.entry))) {
    return false
  }

  const newEntries = copyMarkdownFiles(themeDir, config.entry, projectDir)
  if (newEntries.length === 0) {
    return false
  }

  replaceConfigEntries(projectDir, newEntries)

  return true
}
